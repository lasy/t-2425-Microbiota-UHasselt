---
title: "Identifying microbiota sub-communities using topic models"
subtitle: 'Microbiome Data Analysis Workshop 2025'
author:
  name:  Laura Symul
  orcid: 0000-0001-9286-0590
  email: laura.symul@uclouvain.be
  affiliations:
      - name: "UCLouvain, LIDAM, ISBA"
        address: voie du Roman Pays 20
        city: Louvain-la-Neuve
        state: Belgium
        postal-code: 1348
date: "2024-12-17"
title-slide-attributes:
    data-background-image: images/cover.png
    data-background-size: cover
    data-background-opacity: "0.25"
bibliography: references.bib
# csl: nature.csl
format:
  revealjs:
    css: style.css
    menu: false
    toc: false
    toc-depth: 2
    toc-title: "Outline"
    slide-level: 3
    slide-number: c/t
    show-slide-number: all
    header: "LDA for Microbiota"
    logo: "https://avatars.githubusercontent.com/u/7518113?v=4"
    footer: '[github.com/lasy/t-2425-Microbiota-UHasselt](https://github.com/lasy/t-2425-Microbiota-UHasselt)'
    smaller: true
    show-notes: false # separate-page
    scrollable: true
    auto-stretch: false
    chalkboard: 
      boardmarker-width: 2
      theme: chalkboard
      chalk-width: 3
    multiplex: true
    progress: true
    code-fold: true
    code-overflow: scroll
    code-summary: "How? (code)"
    code-annotations: false
    preview-links: true
    theme: default
execute:
  echo: false
  warning: false
  cache: true # true refresh
from: markdown+emoji
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 160
filters:
  - reveal-auto-agenda
auto-agenda:
  bullets: none
  heading: Outline  
editor: source
---

# Hello ðŸ‘‹ðŸ‘‹ {.center background-color="#DDF1F4"}

### Hello ðŸ‘‹ðŸ‘‹

I'm Laura

. . .

:mortar_board: I am an assistant professor (:baby:) in "non-clinical biostatistics" at UCLouvain



:microscope: My *interdisciplinary* research agenda revolves around "Statistics for Women's Health"



:handshake: I am part of the Vaginal Microbiome Research Consortium ([VMRC](https://vmrc4health.org))


:disguised_face: Controversy: The microbiome is *NOT* compositional in essence! 


:climbing: Besides work, I love climbing (and talking (too much) about it)



![](images/blank.png){height="20px"}

#### Code and data availability

These slides are made with Quarto, and all analyses presented today are executed within the slides.

```{r}
#| echo: true


# Most code is hidden by default; sometimes it can be revealed in the html as here.

library(tidyverse)
library(magrittr)
library(janitor, include.only = "clean_names")
library(patchwork)
library(SummarizedExperiment)
library(tidySummarizedExperiment)
library(phyloseq)
library(microViz)
library(mia)
library(curatedMetagenomicData)
library(topicmodels)
library(alto) # devtools::install_github("lasy/alto")

tmp <- fs::dir_map("R/", source)

theme_set(theme_light())
set.seed(1)
```

You can find the source for this slidedeck on GitHub: [lasy/t-2425-Microbiota-UHasselt](github.com/lasy/t-2425-Microbiota-UHasselt)

Data used here are publicly available and linked in the slides.

#### Feedback

:pray: Please give me feedback or report mistakes/typos (at the end of the workshop in person, or on GitHub using *Issues*)

#### CC-BY-SA 


# Introduction {.center background-color="#DDF1F4"}

## Running Examples

We'll use two microbiota datasets:

-   One vaginal microbiota dataset: The ISALA dataset [@isala] ![](images/logo-Isala.png){width="30px"} 

-   One gut microbiota dataset (LLD study) from the `curatedMetagenomicsData` Bioconductor package [@curatedMg]

### Vaginal microbiota dataset: ISALA

:::: {.columns}
::: {.column width="30%"}
![](images/logo-Isala.png){fig-align="center" width="200px"} 
:::
::: {.column width="70%"}

[ISALA](https://isala.be/en/) is a citizen-science project from Sarah Lebeer's lab @ UAntwerp, Belgium.

The project and data have been described in a Nature Microbiology paper [@isala].

De-identified data for over 3000 samples is available on the [LebeerLab GitHub](https://github.com/LebeerLab/Citizen-science-map-of-the-vaginal-microbiome/tree/main) repository as `tsv` files.

:::
::::

. . .

We'll use the data aggregated at the Genus level (but Species level for *Lactobacillus* spp.) for this example.

```{r}
#| echo: true

github_url <- "https://raw.githubusercontent.com/LebeerLab/Citizen-science-map-of-the-vaginal-microbiome/refs/heads/main/data/isala/"

isala_counts_raw <- read_tsv(file = str_c(github_url, "counts.tsv"))
isala_tax_raw <- read_tsv(file = str_c(github_url, "taxa_spec.tsv"))
isala_metadata_raw <- read_tsv(file = str_c(github_url, "metadata.tsv"))

rm(github_url)

```

```{r}
#| echo: false

# SummarizedExperiment object

get_last_available_level <- function(tax){
  tmp <- bind_cols(tibble("NA" = ""), tax)
  colnames(tmp)[apply(tmp, 1, function(x) which(!is.na(x)) |> max())] 
}

get_last_available_taxon <- function(tax){
  tmp <- bind_cols(tibble("NA" = "?"), tax)
  apply(tmp, 1, function(x) x[which(!is.na(x)) |> max()]) 
}

make_se_from_isala_raw <- function(isala_counts_raw, isala_tax_raw, isala_metadata_raw) {
  
  # we create unique identifiers for the taxa (rowdata)
  tax <- 
    isala_tax_raw |> 
    select(-sequence) |> 
    mutate(
      genus = genus |> str_remove(" group"),
      last_available_level = 
        get_last_available_level(isala_tax_raw |> select(kingdom:genus)),
      last_available_taxon = 
        get_last_available_taxon(isala_tax_raw |> select(kingdom:genus)) |> 
        str_remove("_[a-z]$") |> 
        str_remove(" group"),
      taxon = 
        case_when(
          (last_available_level == "genus") ~ last_available_taxon,
          TRUE ~ str_c(last_available_taxon, " (", last_available_level |> str_sub(1,1) |> str_to_title(), ")")
        )
      ) |> 
    select(-last_available_taxon) |> 
    as.data.frame() |> 
    column_to_rownames(var = "taxon")
  
  # sample information
  metadata <- 
    isala_metadata_raw |> 
    clean_names() |>
    select(
      bio_sample_id, 
      general_age, health_bmi, health_antibiotic_3months, sexual_intercourse_24hours, 
      everything()
      ) |>
    as.data.frame() |> 
    column_to_rownames(var = "bio_sample_id")
  
  # count table
  counts <- 
    isala_counts_raw |> 
    clean_names() |>
    as.data.frame() |> 
    column_to_rownames(var = "bio_sample_id") |> 
    t()
  
  counts <- counts[tax$taxon_id, ] |> set_rownames(rownames(tax))
  counts <- counts[, rownames(metadata)]
  
  SummarizedExperiment::SummarizedExperiment(
    assays = list(counts = counts, rel_ab = t(t(counts)/colSums(counts))),
    rowData = tax,
    colData = metadata
  )
}

```

```{r}
#| echo: true

isala_full <- 
  make_se_from_isala_raw(
    isala_counts_raw, 
    isala_tax_raw, 
    isala_metadata_raw
    )

rm(isala_counts_raw, isala_tax_raw, isala_metadata_raw)

```

```{r}
isala_full
```

```{r}
rm(make_se_from_isala_raw, get_last_available_level, get_last_available_taxon)
```


### Vaginal microbiota dataset: ISALA

```{r}
subset_size <- 200
```

We take a random subset of `r subset_size` samples (out of `r ncol(isala_full)`) to make it easier to work with.

```{r}

selected_samples <- isala_full |> colnames() |> sample(subset_size)
isala <- isala_full[, selected_samples]

rm(selected_samples)

```

. . .

We then also filter out "rare taxa":

```{r}

isala_summary <- 
  isala |> 
  as_tibble() |> 
  group_by(.feature) |> 
  summarize(
    n_samples = sum(counts > 0),
    prevalence = n_samples/n(),
    mean_rel_ab = mean(rel_ab),
    max_rel_ab = max(rel_ab)
  )

min_prevalence <- 5/100
min_max_rel_ab <- 1/1000

```

```{r}
#| fig-height: 4
#| fig-width: 6
isala_summary |> 
  mutate(`is Lacto` = str_detect(.feature, "Lactobacillus")) |> 
  ggplot() +
  aes(x = max_rel_ab, y = prevalence, label = .feature, color = `is Lacto`) +
  geom_hline(yintercept = min_prevalence, linetype = "dashed") +
  geom_vline(xintercept = min_max_rel_ab, linetype = "dashed") +
  geom_point(size = 3, alpha = 0.25) + 
  scale_x_log10("Max. relative abundance across samples") +
  scale_y_log10("Prevalence\n(fraction of samples where taxa is present)") +
  labs(caption = "Each dot is a taxon")


```

```{r}

included_taxa <- 
  isala_summary |> 
  filter(max_rel_ab > min_max_rel_ab, prevalence > min_prevalence) |>
  pull(.feature)
isala <- isala[included_taxa, ]

rm(included_taxa, isala_summary)

```

This reduces the number of taxa from `r nrow(isala_full)` to `r nrow(isala)`.

### Gut microbiota dataset: `curatedMetagenomics`


We'll use data from the [`curatedMetagenomicData` Bioconductor package](https://bioconductor.org/packages/release/data/experiment/html/curatedMetagenomicData.html).

![](images/curatedMetagenomicData.png){fig-align="center" width="1200px"} 


### Gut microbiota dataset: `curatedMetagenomics`

and more specifically, data from the `LifeLinesDeep 2016` study.

. . .

As for the ISALA data, we create a `SummarizedExperiment` object from the package data.

```{r}

LLD_raw <- 
  curatedMetagenomicData(
    "LifeLinesDeep_2016.relative_abundance", 
    counts = TRUE,
    dryrun = FALSE, 
    rownames = "short"
    )[[1]]

tmp_counts <- LLD_raw |> assay("relative_abundance")

LLD_full <- 
  SummarizedExperiment(
    assays = 
      list(
        counts = tmp_counts, 
        rel_ab = t(t(tmp_counts)/colSums(tmp_counts))
        ),
    rowData = 
      LLD_raw |> rowData() |> 
      as.data.frame() |> 
      mutate(
        phylum = 
          ifelse(
            is.na(phylum) & (species == "Blastocystis sp. subtype 1"), 
            "Bigyra", phylum
            )
      ),
    colData = LLD_raw |> colData() |> as.data.frame()
    )

rm(LLD_raw, tmp_counts)


```

```{r}
LLD_full
```




### Gut microbiota dataset: `curatedMetagenomics`


As for the ISALA data, we take a random subset of `r subset_size` samples (out of `r ncol(LLD_full)`) to make it easier to work with.

```{r}

selected_samples <- LLD_full |> colnames() |> sample(subset_size)
LLD <- LLD_full[, selected_samples]
rm(selected_samples, subset_size)

```

. . .

We then also filter out "rare taxa":

```{r}

LLD_summary <- 
  LLD |> 
  as_tibble() |> 
  group_by(.feature) |> 
  summarize(
    n_samples = sum(counts > 0),
    prevalence = n_samples/n(),
    mean_rel_ab = mean(rel_ab),
    max_rel_ab = max(rel_ab)
  )

```

```{r}
#| fig-height: 4
#| fig-width: 6
LLD_summary |> 
  ggplot() +
  aes(x = max_rel_ab, y = prevalence, label = .feature) +
  geom_hline(yintercept = min_prevalence, linetype = "dashed") +
  geom_vline(xintercept = min_max_rel_ab, linetype = "dashed") +
  geom_point(size = 3, alpha = 0.25) + 
  scale_x_log10("Max. relative abundance across samples") +
  scale_y_log10("Prevalence\n(fraction of samples where taxa is present)") +
  labs(caption = "Each dot is a taxon")


```

```{r}

included_taxa <- 
  LLD_summary |> 
  filter(max_rel_ab > min_max_rel_ab, prevalence > min_prevalence) |>
  pull(.feature)
LLD <- LLD[included_taxa, ]

rm(included_taxa, LLD_summary)

```

This reduces the number of taxa from `r nrow(LLD_full)` to `r nrow(LLD)`.

```{r}
rm(min_max_rel_ab, min_prevalence)
```



```{r}

dataset_colors <- c("steelblue", "indianred2")

```



## Quick exploration and comparison of the data: Microbiota diversity

### $\alpha$-diversity

```{r}

isala <- isala |> mia::addAlpha(index = "shannon_diversity")
LLD <- LLD |> mia::addAlpha(index = "shannon_diversity")


alpha_diversity <- 
  bind_rows(
    isala |> as_tibble() |> select(.sample, shannon_diversity) |> distinct() |> 
      mutate(dataset = "ISALA (vag. swabs)"),
    LLD |> as_tibble() |> select(.sample, shannon_diversity) |> distinct() |> 
      mutate(dataset = "LifeLineDeep (stool)")
  )


```


```{r}
#| fig-height: 4
 
alpha_diversity |> 
  ggplot() +
  aes(x = shannon_diversity, fill = dataset) +
  geom_histogram(binwidth = 0.05) +
  ylab("Number of samples") +
  xlab("alpha-diversity\n(Shannon index computed on taxa counts)") +
  facet_grid(dataset ~ .) +
  scale_fill_manual(values = dataset_colors)

```

```{r}
rm(alpha_diversity)
```

:arrow_right: Vaginal swabs $\alpha$-diversity is lower than stool samples $\alpha$-diversity.


### $\beta$-diversity

```{r}

beta_diversity <- 
  bind_rows(
    isala |> assay("rel_ab") |> t() |> 
      vegan::vegdist(method = "bray") |>
      as.matrix() |> as.data.frame() |> rownames_to_column("sample 1") |> 
      pivot_longer(-"sample 1", names_to = "sample 2", values_to = "BC") |>
      mutate(
        `sample 1` = `sample 1` |> fct_inorder(),
        `sample 2` = `sample 2` |> factor(levels = `sample 1` |> levels())
        ) |>
      filter(as.numeric(`sample 1`) < as.numeric(`sample 2`)) |> 
      mutate(dataset = "ISALA (vag. swabs)"),
    LLD |> assay("rel_ab") |> t() |> 
      vegan::vegdist(method = "bray") |>
      as.matrix() |> as.data.frame() |> rownames_to_column("sample 1") |> 
      pivot_longer(-"sample 1", names_to = "sample 2", values_to = "BC") |>
      mutate(
        `sample 1` = `sample 1` |> fct_inorder(),
        `sample 2` = `sample 2` |> factor(levels = `sample 1` |> levels())
        ) |>
      filter(as.numeric(`sample 1`) < as.numeric(`sample 2`)) |> 
      mutate(dataset = "LifeLineDeep (stool)")
  )

```

```{r}
#| fig-height: 4
 
beta_diversity |> 
  ggplot() +
  aes(x = BC, fill = dataset) +
  geom_histogram(binwidth = 0.05) +
  ylab("Number of pairs") +
  xlab("beta-diversity\n(Pairwise Bray-Curtis dissimilarities computed on taxa relative abundances)") +
  facet_grid(dataset ~ .) +
  scale_fill_manual(values = dataset_colors)

```

```{r}
rm(beta_diversity)
```

:arrow_right: Vaginal swabs $\beta$-diversity has a wide distribution: some samples are very similar (complete overlap), others are very different (no overlap).



## Any typical groups or types?

### Any typical microbiota groups or types?


:::: {.columns}

::: {.column width="50%"}

```{r}
#| fig-height: 6.5
#| fig-width: 6

isala_heatmap <- 
  isala |> 
  mia::convertToPhyloseq() |> 
  microViz::tax_transform("compositional", rank = "genus") |> 
  microViz::comp_heatmap(sample_ser_dist = "bray", tax_ser_dist = "jaccard")

isala_heatmap <- ComplexHeatmap::draw(isala_heatmap)

```
ISALA (vaginal swabs)

:::

::: {.column width="50%" .fragment}

```{r}
#| fig-height: 6.5
#| fig-width: 6


LLD_family <- LLD |> mia::agglomerateByRank(rank = "family")

LLD_heatmap <- 
  LLD_family |> 
  mia::convertToPhyloseq() |> 
  microViz::tax_transform("compositional") |> 
  microViz::comp_heatmap(sample_ser_dist = "bray", tax_ser_dist = "jaccard")

LLD_heatmap <- LLD_heatmap |> ComplexHeatmap::draw()

```
LLD (stool) - aggregated at the Family level

:::

::::



```{r}

# isala |> 
#   as_tibble() |>
#   ggplot() +
#   aes(x = .sample, y = .feature, alpha = rel_ab) +
#   geom_tile(fill = dataset_colors[1]) +
#   scale_alpha("Rel. abundance", range = c(0, 1)) +
#   scale_x_discrete("Sample", breaks = NULL) +
#   ylab("")

# LLD |> 
#   as_tibble() |>
#   ggplot() +
#   aes(x = .sample, y = .feature, alpha = rel_ab) +
#   geom_tile(fill = dataset_colors[2]) +
#   scale_alpha("Rel. abundance", range = c(0, 1)) +
#   scale_x_discrete("Sample", breaks = NULL) +
#   ylab("")

```


## "Subcommunities" in microbiotas

:warning: Note: bacterial "*subcommunity*" is not a well defined term in microbiology.

But it aims to reflect the consequences of well establish concepts (*i.e.*, bacterial interactions).

### Bacterial interactions

Many bacteria interact with each other in many ways, mostly through metabolic exchanges.

. . .

:::: {.columns}
::: {.column width="50%" .fragment}

**Negative interactions**

-  Competition (for the same nutrients) 

![](images/interactions_competition.png){width="200px"} 



-  Direct inhibition (*e.g.*, by producing compounds toxic to other bacteria) 

![](images/interactions_inhibition.png){width="200px"} 

For example, in the vaginal microbiota, *lactobicilli* produce lactic acid, which inhibits the growth of other bacteria.

:::


::: {.column width="50%" .fragment}

**Positive interactions**

-  Commensalism (*e.g.*, one species benefits from another one without affecting it)

![](images/interactions_commensalism.png){width="200px"} 



-  Mutualism (cooperation or cross-feeding (*e.g.*, bacteria feed on each other wastes) 

![](images/interactions_mutualism.png){width="200px"} 


:::
::::



::: {.notes}

For species-species interactions, see: https://en.wikipedia.org/wiki/Symbiosis

:::


### Bacterial interactions



![](images/blank.png){height="50px"} 

In microbiotas, this leads to complex networks of interactions.


![](images/interactions_network.png){fig-align="center" width="800px"} 

### Subcommunities

Bacteria-bacteria interactions lead to non-random co-occurence patterns.


. . .

In the context of microbiotas, *subcommunities* are groups of bacteria that frequently co-occur.

. . .

::: {.r-stack}

![](images/interactions_subcommunities_empty.png){.fragment width="450"}

![](images/interactions_subcommunities.png){.fragment width="450"}


:::


![](images/blank.png){.fragment height="50"}

. . .


- Subcommunities can co-exist in the same microbiota

- There can be *transitions* between subcommunity dominance




## Duality: "types" â‡” subcommunities

If there are subcommunities, we expect microbiota "types" to be associated with them.

. . .

And if there are microbiota "types", we expect subcommunities membership to match the composition of prototypical "type" samples.







# Topic models {.center background-color="#DDF1F4"}

## What are topic models?


### Topic models


Topic models are statistical models for identifying "*topics*" in corpus of text documents.


![](images/LDA_illlustration.png){width="100pc"}

. . . 

Several Bayesian and non-Bayesian models have been proposed:

-   **Latent Dirichlet Allocation** (LDA) [@lda1; @lda]
-   and derived models (*e.g.*, Hierarchical LDA)
-   Non-negative Matrix Factorization (NMF) 
-   (probabilistic) Latent Semantic Analysis/Indexing ((p)LSA/LSI) 
-   ...

. . .
    
  
- There are also "supervised" versions of topic models


### LDA


:::: {.columns}
::: {.column width="30%"}
![](images/LDA_plate.png){width="200px"}

[@lda]
:::
::: {.column width="70%"}

![](images/LDA_illlustration.png){width="700px"}
:::
:::: 

. . .

Parameter *inference* is typically done using Gibbs sampling or variational inference.

. . .

Several LDA implementations are available in `R`; among the best is the `topicmodels` package [@topicmodels].


## LDA for microbiota data?


### LDA for microbiota data



:::: {.columns}
::: {.column #vcenter width="60%"}
![](images/LDA_illlustration.png){width="700px"}
![](images/LDA_illlustration_microbiota.png){width="700px"}
:::
::: {.column #vcenter width="40%"}

| NLP       | Microbiota analyses             |
|-----------|---------------------------------|
| Documents | samples                         |
| Words     | taxa (ASV, species, genus, ...) |
| Topics    | sub-communities                 |
:::
::::



[@sankaran_latent_2019; @subcommunities]



### LDA on microbiota data


```{r}

plot_LDA_beta <- function(beta, color, order_taxa = TRUE, order_topics = FALSE){
  
  tmp <- 
    beta |> 
    as.data.frame() |> 
    rownames_to_column("taxon") |>
    as_tibble() |> 
    pivot_longer(-taxon, names_to = "topic", values_to = "p") |>
    mutate(topic = topic |> as.numeric() |> factor()) 

  if (is.logical(order_taxa)) {
    tmp <- 
      tmp |> 
      group_by(taxon) |> 
      mutate(taxon_score = weighted.mean(topic |> as.numeric(), p)) |> 
      ungroup() |> 
      arrange(-taxon_score) |> 
      mutate(taxon = taxon |> fct_inorder()) |> 
      select(-taxon_score)
  } else if (is.character(order_taxa)) {
    tmp <- 
      tmp |> 
      mutate(taxon = taxon |> factor(levels = order_taxa))
  } else {
    tmp <- tmp |> mutate(taxon = taxon |> fct_inorder())
  }
  
  if (order_topics) {
     tmp <- 
      tmp |> 
      group_by(topic) |> 
      mutate(topic_score = weighted.mean(taxon |> as.numeric(), p)) |> 
      ungroup() |> 
      arrange(topic_score) |> 
      mutate(topic = topic |> fct_inorder()) |> 
      select(-topic_score) 
  } else {
    tmp <- tmp |> mutate(topic = topic |> fct_inorder())
  }

  tmp |> 
    ggplot() +
    aes(x = topic, y = taxon |> fct_rev(), fill = p) +
    geom_tile() +
    scale_fill_gradient(low = "white", high = color, limits = c(0, 1)) + # 
    ylab("")
  
}


plot_LDA_gamma <- function(gamma, color, order_samples, order_topics){
  
  tmp <- 
    gamma |> 
    as.data.frame() |> 
    rownames_to_column("sample") |>
    as_tibble() |> 
    pivot_longer(-sample, names_to = "topic", values_to = "proportion") |>
    mutate(topic = topic |> as.numeric() |> factor())
  
  
  if (is.logical(order_samples)) {
    tmp <- 
      tmp |> 
      group_by(sample) |> 
      mutate(sample_score = weighted.mean(topic |> as.numeric(), proportion)) |> 
      ungroup() |> 
      arrange(-sample_score) |> 
      mutate(sample = sample |> fct_inorder()) |> 
      select(-sample_score)
  } else if (is.character(order_samples)) {
    tmp <- 
      tmp |> 
      mutate(sample = sample |> factor(levels = order_samples))
  } else {
    tmp <- tmp |> mutate(sample = sample |> fct_inorder())
  }
  
  if (is.logical(order_topics)) {
    tmp <- 
      tmp |> 
      group_by(topic) |> 
      mutate(topic_score = weighted.mean(sample |> as.numeric(), proportion)) |> 
      ungroup() |> 
      arrange(topic_score) |> 
      mutate(topic = topic |> fct_inorder()) |> 
      select(-topic_score) 
  }
  if (is.character(order_topics)) {
    tmp <- 
      tmp |> 
      mutate(topic = topic |> factor(levels = order_topics))
  } else {
    tmp <- tmp |> mutate(topic = topic |> fct_inorder())
  }

  tmp |> 
    ggplot() +
    aes(x = sample, y = topic |> fct_rev(), fill = proportion) +
    geom_tile() +
    scale_fill_gradient(low = "white", high = color, limits = c(0, 1)) + 
    ylab("topic") +
    theme(axis.text.x = element_blank())
  
}


```


::: {.panel-tabset}

#### ISALA (vag. swabs)

```{r}
#| echo: true

isala_tse <- isala |> mia::addLDA(k = 6)

```

```{r}

g_beta <- 
plot_LDA_beta(
  isala_tse |> reducedDim("LDA") |> attr("loadings"),
  dataset_colors[1],
  order_taxa = isala@NAMES[isala_heatmap |> ComplexHeatmap::row_order()],
  order_topics = TRUE
  ) 

g_gamma <- 
  plot_LDA_gamma(
    isala_tse |> reducedDim("LDA"),
    dataset_colors[1],
    order_samples = colnames(isala)[isala_heatmap |> ComplexHeatmap::column_order()],
    order_topics = g_beta$data$topic |> levels()
  ) 

```


:::: {.columns}

::: {.column #vcenter width="35%"}
```{r}
#| fig-height: 7
#| fig-width: 7
isala_heatmap 
```
:::
::: {.column #vcenter width="5%" .fragment}
~
:::
::: {.column #vcenter width="20%" .fragment}
```{r}
#| fig-height: 7
#| fig-width: 3.5
g_beta + theme(legend.position = "none") # coord_fixed(ratio = 1/2) + 
```
:::
::: {.column width="35%" .fragment}
```{r}
#| fig-height: 3.5
#| fig-width: 7
g_gamma + theme(legend.position = "bottom") # coord_fixed(ratio = 10) + 
```
:::

::::



#### LifeLines DEEP (stool)



```{r}
#| echo: true

LLD_LDA <- LLD_family |>  assay("counts") |> t() |> topicmodels::LDA(k = 6, method = "VEM")


```

```{r}

g_beta <- 
  plot_LDA_beta(
    LLD_LDA@beta |> t() |> exp() |> set_colnames(1:nrow(LLD_LDA@beta)) |> set_rownames(LLD_family |> rownames()),
    dataset_colors[1],
    order_taxa = rownames(LLD_family)[LLD_heatmap |> ComplexHeatmap::row_order()],
    order_topics = TRUE
  ) 

g_gamma <- 
  plot_LDA_gamma(
    LLD_LDA@gamma |> set_colnames(1:ncol(LLD_LDA@gamma)) |> set_rownames(colnames(LLD)),
    dataset_colors[1],
    order_samples = colnames(LLD)[LLD_heatmap |> ComplexHeatmap::column_order()],
    order_topics = g_beta$data$topic |> levels()
  ) 

```


:::: {.columns}

::: {.column #vcenter width="35%"}
```{r}
#| fig-height: 7
#| fig-width: 7
LLD_heatmap 
```
:::
::: {.column #vcenter width="5%" .fragment}
~
:::
::: {.column #vcenter width="20%" .fragment}
```{r}
#| fig-height: 7
#| fig-width: 3.5
g_beta + theme(legend.position = "none") # coord_fixed(ratio = 1/2) + 
```
:::
::: {.column width="35%" .fragment}
```{r}
#| fig-height: 3.5
#| fig-width: 7
g_gamma + theme(legend.position = "bottom") # coord_fixed(ratio = 10) + 
```
:::

::::

::: 


## LDA *vs* clustering

### LDA *vs* clustering

:::: {.columns}
::: {.column width="50%"}
![](images/LDA_vs_clustering_C.png)
![](images/LDA_vs_clustering_LDA.png)
:::
::: {.column width="50%" .fragment}
![](images/lebeer_PCoA.png){height="500px"}

from [@isala].
Valencia is a vaginal microbiota "classifier" [@valencia] built from a large colated dataset.
:::
::::


```{r}
#| eval: false

isala_tse <- 
  isala_tse |> 
  mia::addNMDS(method = "bray", assay.type = "rel_ab")

isala_tse |> 
  reducedDim("NMDS") |>
  as.data.frame() |> 
  rownames_to_column(".sample") |>
  as_tibble() |> 
  dplyr::left_join(
    isala |> as_tibble() |> select(.sample, valencia_subcst),
    by = join_by(.sample)
  ) |> 
  ggplot(aes(x = V1, y = V2, col = valencia_subcst)) +
  geom_point() +
  coord_fixed()


```

### LDA *vs* clustering


- In longitudinal data, clustering can't capture the *rate* of transitions 

- Mixed memberships (topic models) are more powerful than categorical memberships (clustering) to find associations with responses.

- "Transition" clusters may group samples that are on very different trajectories.



# Choosing $K$, the number of topics {.center background-color="#DDF1F4"}

## Perplexity-based methods

### Log-likelihood and Perplexity

The log-likelihood of observing counts $\mathbf{X}$ ($I \times J$) given a model $M$ with parameters $\beta$ and $\gamma$ is

$$\mathcal{L}(\mathbf{X}|M) = \mathcal{L}(\mathbf{X}|\beta, \gamma) = \sum_{i=1}^{I} \log p(\mathbf{x}_{i.}|\beta, \gamma) = \sum_{i = 1}^I \sum_{j = 1}^J x_{ij} \log(\beta \ \gamma)_{ij}$$

. . .


The perplexity $PP$ is then defined as $PP(\mathbf{X}) = \exp\left(- \frac{ \mathcal{L}(\mathbf{X}|\beta, \gamma)}{\sum_{i = 1}^I \sum_{j = 1}^J x_{ij}} \right)$

See [@topicmodels] for details.

```{r}
#| include: false
# for example:

w <- isala |> assay("counts") 
beta <- isala_tse |> reducedDim("LDA") |> attr("loadings") 
gamma <- isala_tse |> reducedDim("LDA") 

ll <- (log(beta %*% t(gamma)) * w) |> sum()

exp(-ll / sum(w)) # Perplexity
 
```

. . .

The perplexity is expected to decrease as the number of topics increases, so we look for an elbow.

```{r}
#| echo: true

ks <- 2:15

isala_tse_1 <- 
  isala |> 
  mia::addLDA(k = ks, name = "LDA_multiple_k", control = list(seed = 1))
isala_tse_2 <- 
  isala |> 
  mia::addLDA(k = ks, name = "LDA_multiple_k", control = list(seed = 9))

```

```{r}
#| fig-height: 2

g_perplexity <- 
  bind_rows(
    isala_tse_1 |> 
      reducedDim("LDA_multiple_k") |> 
      attr("eval_metrics") |>
      mutate(seed = 1),
    isala_tse_2 |>
      reducedDim("LDA_multiple_k") |>
      attr("eval_metrics") |>
      mutate(seed = 9)
  ) |> 
  ggplot() +
  aes(x = k, y = perplexity) +
  geom_path() + geom_point() +
  facet_grid(. ~ seed, labeller = label_both) +
  scale_x_continuous(breaks = ks, minor_breaks = NULL) +
  ylab("Perplexity\n(ISALA vag. swabs)")

g_perplexity

```

Note that since LDA is not deterministic, the perplexity may vary between runs.



### Perplexity-based cross-validation

We can also choose $K$ based on the perplexity in cross-validation.


```{r}

nfolds <- 5
isala_cv <- run_lda_cv(isala, nfolds, ks, dir = "cv_isala/", refresh = FALSE)
LLD_cv <- run_lda_cv(LLD_family, nfolds, ks, dir = "cv_LLD/", refresh = FALSE)

```
```{r}

g_cv_isala <- 
  isala_cv |> 
  filter(set == "test") |> 
  ggplot() +
  aes(x = ks, y = perplexity, group = fold) +
  geom_line() +
  geom_point() +
  xlab("Number of topics (K)") +
  ylab("Perplexity on test sets") +
  ggtitle("ISALA (vag. swabs)")

```


```{r}

g_cv_LLD <- 
  LLD_cv |> 
  filter(set == "test") |> 
  ggplot() +
  aes(x = ks, y = perplexity, group = fold) +
  geom_line() +
  geom_point() +
  xlab("Number of topics (K)") +
  ylab("Perplexity on test sets") +
  ggtitle("LLD (stool)")

```

```{r}

g_cv_isala +  g_cv_LLD

```





## Alignement across K

[@alto]


```{r}

ks <- c(1, ks)

isala_lda_models <- 
  alto::run_lda_models(
    data = isala |> assay("counts") |> t(),
    lda_varying_params_lists = map(ks, ~ list(k = .x)) |> set_names(str_c("k = ", ks)),
    dir = "lda_models_isala/",
    seed = 3L,
    reset = FALSE
  )

LLD_lda_models <- 
  alto::run_lda_models(
    data = LLD_family |> assay("counts") |> t(),
    lda_varying_params_lists = map(ks, ~ list(k = .x)) |> set_names(str_c("k = ", ks)),
    dir = "lda_models_LLD/",
    seed = 1L
  )

```
```{r}

isala_lda_models_product <- alto::align_topics(isala_lda_models, method = "product")
isala_lda_models_transport <- alto::align_topics(isala_lda_models, method = "transport")

LLD_lda_models_product <- alto::align_topics(LLD_lda_models, method = "product")
LLD_lda_models_transport <- alto::align_topics(LLD_lda_models, method = "transport")

```



### General idea 

If some true $K^*$ sub-communities exist, we expect the corresponding topics to be robustly identified by LDA at any $K \geq K^*$.

. . .

So, topics that are similar across different $K$ are more likely to correspond to these true sub-communities.

. . .

And topics that are not similar across different $K$ are more likely to be spurious.

. . .

How to identify topics that are similar across different $K$?


### Matching topics across $K$ ("Aligning" them)



How to match topics across different $K$?


. . .

Topics that are present in the same samples are likely to be similar.


::: {.panel-tabset}

#### ISALA (vag. swabs)

```{r}
plot_gamma(isala_lda_models_transport, models = c(4:6, length(ks)))
```

#### LLD (stool) - family level

```{r}
plot_gamma(LLD_lda_models_transport, models = c(4:6, length(ks)))
```
:::


### Matching topics across $K$ ("Aligning" them)

or...

Topics that have a similar composition are likely to be similar.


::: {.panel-tabset}

#### ISALA (vag. swabs)

```{r}
alto::plot_beta(isala_lda_models_transport, models = c(4:6, length(ks)), color_by = "topic")
```

#### LLD (stool) - family level

```{r}
alto::plot_beta(LLD_lda_models_transport, models = c(4:6, length(ks)), color_by = "topic")
```
:::



### Duality: $\beta$ & $\gamma$

"Topics that are present in the same samples are likely to be similar"

. . .

$\rightarrow$ Alignment based on the $\gamma$ matrix (proportion of each topic in each sample)

. . .

![](images/blank.png){height="50px"} 

"Topics that have a similar composition are likely to be similar"

. . .

$\rightarrow$ Alignment based on the $\beta$ matrix (probability of each taxon in each topic)


### Sample-composition-based alignement ($\gamma$)


:::: {.columns}
::: {.column width="35%" #vcenter}
![](images/alto_product.png){height="200px"}
:::
::: {.column width="65%" #vcenter}
Alignment weights for the product method: $w_{jk} = \sum_{i=1}^{N}\gamma_{ij}^{(1)} \gamma_{ik}^{(2)}$ 

where $\gamma_{ij}^{(1)}$ are the proportions of topic $j$ in sample $i$ for model 1.
:::
::::
. . .

```{r}

g_weights <- 
  isala_lda_models_product@weights |> 
  filter(m == "k = 6", m_next == "k = 7") |> 
  mutate(k = k |> factor(), k_next = k_next |> factor()) |> 
  ggplot() +
  aes(x = k, y = k_next |> fct_rev(), fill = fw_weight) +
  geom_tile() +
  coord_fixed() +
  scale_fill_gradient("fw weights", low = "white", high = dataset_colors[1]) +
  ylab("topics for k = 7") + xlab("topics for k = 6") 
  
```
```{r}
#| fig-height: 3.5
#| fig-width: 9

plot_gamma(isala_lda_models_product, models = c(5:6)) + 
  labs(title = "ISALA (vag. swabs)") + 
  plot_spacer() +
  g_weights +
  plot_layout(widths = c(3, 0.3, 1))
```


### Topic-composition-based alignement ($\beta$)


:::: {.columns}
::: {.column width="35%" #vcenter}
![](images/alto_transport.png){height="200px"}
:::
::: {.column width="65%" #vcenter}
Alignment weights are obtained by solving the optimal transport problem

$$\min_{W \ \in \ \mathcal{U}(p, q)} \langle C, W\rangle$$


$$\mathcal{U}(p,q) := \{W \in R^{|V_p|\times|V_q|}_+ : W \mathbf{1}_{|V_q|} = p \text{ and }  W^{T} \mathbf{1}_{|V_p|} = q\}$$


where $C(v, v') := JSD(\beta(v), \beta(v'))$ is the **cost** of transporting mass between topics $v$ and $v'$.

:::
::::
. . .

```{r}

g_weights <- 
  isala_lda_models_transport@weights |> 
  filter(m == "k = 6", m_next == "k = 7") |> 
  mutate(k = k |> factor(), k_next = k_next |> factor()) |> 
  ggplot() +
  aes(x = k, y = k_next |> fct_rev(), fill = fw_weight) +
  geom_tile() +
  coord_fixed() +
  scale_fill_gradient("fw weights", low = "white", high = dataset_colors[1]) +
  ylab("topics for k = 7") + xlab("topics for k = 6") 
  
```
```{r}
#| fig-height: 4
#| fig-width: 9

plot_beta(isala_lda_models_product, models = c(5:6), color_by = "topic") + 
  labs(title = "ISALA (vag. swabs)") + 
  plot_spacer() +
  g_weights +
  plot_layout(widths = c(3, 0.3, 1))
```

### Alignment plots


![](images/alto_illustration.png){height="400px"}



### Alignment plots

::: {.panel-tabset}

#### Isala (vag. swabs)


```{r}
#| fig-height: 5
#| fig-width: 12

plot_alignment(isala_lda_models_product) + 
  labs(title = "Product alignment") + 
plot_alignment(isala_lda_models_transport) + 
  labs(title = "Transport alignment")

```
#### LLD (stool)

```{r}
#| fig-height: 5
#| fig-width: 12

plot_alignment(LLD_lda_models_product) + 
  labs(title = "Product alignment") + 

plot_alignment(LLD_lda_models_transport) + 
  labs(title = "Transport alignment")

```

:::



### "True" *vs.* "Spurious" sub-communities: diagnostic scores


![](images/alto_illustration.png){fig-align="center" height="250px"}


:::: {.columns}
::: {.column width="33%" .fragment}

*Plateau* in the **number of paths** in the alignment graph at $K^*$.

::: {style="font-size: 60%;"}
Path$(v)$ of a node $v \in V_m$ is set to Path($v*$), where $v^* := \arg \max\limits_{v' \in V_{(m+1):M}} (w_{\text{out}}(v, v') + w_{\text{in}}(v, v'))$
:::

![](images/path_illustration.png){height="150px"}
:::
::: {.column width="33%" .fragment}
Maximum **coherence** scores: how similar is a topic to the other topics on the same path?

::: {style="font-size: 60%;"}
$c(v) = \frac{1}{|\mathcal{P}(v)|} \sum_{v'\in \mathcal{P}(v)} \min\left(w_{\text{out}}(v, v') + w_{\text{in}}(v, v')\right)$

where $\mathcal{P}(v) = \{v': \text{Path}(v') = \text{Path}(v)\}$.
:::


![](images/coherence_illustration.png){height="150px"}

:::

::: {.column width="33%" .fragment}
Elbow in the **refinement** scores: is this topic a good "parent" topic for the downstream topics? 

::: {style="font-size: 60%;"}
$r(v) = \frac{|V_m|}{M - m} \sum_{m' = m+1}^M \sum_{v'_{m'} \in V_{m'}} w_{\text{out}}(v, v'_{m'})  w_{\text{in}}(v, v'_{m'})$
:::



![](images/refinement_illustration.png){height="150px"}

:::
::::

### "True" *vs.* "Spurious" sub-communities: diagnostic scores

::: {.panel-tabset}

#### Isala (vag. swabs)




:::: {.columns}
::: {.column width="33%" .fragment}

```{r}
#| fig-height: 5.5
#| fig-width: 3

bind_rows(
  compute_number_of_paths(isala_lda_models_product) |> mutate(method = "Product"),
  compute_number_of_paths(isala_lda_models_transport) |> mutate(method = "Transport")
) |> 
  ggplot() +
  aes(x = n_topics, y = n_paths, col = method) +
  geom_abline(slope = 1, intercept = 0, col = "gray") +
  geom_path() + geom_point() +
  scale_x_continuous(breaks = ks, minor_breaks = NULL) +
  scale_y_continuous(breaks = ks, minor_breaks = NULL) +
  coord_fixed() +
  ylab("number of paths") + xlab("number of topics") +
  theme(legend.position = "bottom") +
  
  g_cv_isala +
  
  plot_layout(ncol = 1)
  
```
:::
::: {.column width="33%" .fragment}
```{r}
#| fig-height: 5.5
#| fig-width: 3
plot_alignment(isala_lda_models_product, color_by = "coherence") + xlab("") + guides(fill = "none") + ggtitle("Coherence") +
  plot_alignment(isala_lda_models_transport, color_by = "coherence") + xlab("") + guides(fill = "none") +
  plot_layout(ncol = 1) & theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

:::
::: {.column width="33%" .fragment}
```{r}
#| fig-height: 5.5
#| fig-width: 3
plot_alignment(isala_lda_models_product, color_by = "refinement") + xlab("") + guides(fill = "none") + ggtitle("Refinement") +
  plot_alignment(isala_lda_models_transport, color_by = "refinement") + xlab("") + guides(fill = "none") +
  plot_layout(ncol = 1) & theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```
:::
::::


#### LLD (stool)



:::: {.columns}
::: {.column width="33%" .fragment}

```{r}
#| fig-height: 5.5
#| fig-width: 3

bind_rows(
  compute_number_of_paths(LLD_lda_models_product) |> mutate(method = "Product"),
  compute_number_of_paths(LLD_lda_models_transport) |> mutate(method = "Transport")
) |> 
  ggplot() +
  aes(x = n_topics, y = n_paths, col = method) +
  geom_abline(slope = 1, intercept = 0, col = "gray") +
  geom_path() + geom_point() +
  scale_x_continuous(breaks = ks, minor_breaks = NULL) +
  scale_y_continuous(breaks = ks, minor_breaks = NULL) +
  coord_fixed() +
  ylab("number of paths") + xlab("number of topics") +
  theme(legend.position = "bottom")  +
  
  g_cv_LLD +
  
  plot_layout(ncol = 1)
  
  
```
:::
::: {.column width="33%" .fragment}
```{r}
#| fig-height: 5.5
#| fig-width: 3
plot_alignment(LLD_lda_models_product, color_by = "coherence") + xlab("") + guides(fill = "none") + ggtitle("Coherence") +
  plot_alignment(LLD_lda_models_transport, color_by = "coherence") + xlab("") + guides(fill = "none") +
  plot_layout(ncol = 1) & theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

:::
::: {.column width="33%" .fragment}
```{r}
#| fig-height: 5.5
#| fig-width: 3
plot_alignment(LLD_lda_models_product, color_by = "refinement") + xlab("") + guides(fill = "none") + ggtitle("Refinement") +
  plot_alignment(LLD_lda_models_transport, color_by = "refinement") + xlab("") + guides(fill = "none") +
  plot_layout(ncol = 1) & theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```
:::
::::


:::





# Conclusions & references {.center background-color="#DDF1F4"}

### Summary


- Bacteria interact with each other in complex ways. 

. . .

- These positive/negative interactions can lead to the existence of *subcommunities*: groups of bacteria that are more likely to be found together.

![](images/interactions_subcommunities.png){width="200px"}


. . .

- Topic models (*e.g.*, LDA) can be used to identify subcommunities from microbiota count data.

. . .

- The number of topics $K$ can be chosen based on (CV) perplexity or through **topic alignment** across $K$.

![](images/alto_illustration.png){width="200px"}



. . .

- Topic models also serve to reduce the dimensionality of the data.

    - Topics can be used as features in downstream analyses.
    
    - For that purpose, it is typically **more powerful than clustering** approaches as clusters do not exist in most microbiotas.



### `alto` package

[`alto`](https://github.com/lasy/alto) is an `R` package that implements the "topics alignment" methods: [lasy.github.io/alto](https://lasy.github.io/alto/index.html)

![](images/alto_webpage.png){.nostretch height="300px"}

### References

::: {#refs}
:::


### Thank you! {background-image="images/cover.png" background-size="cover" background-opacity="0.5"}

Questions?

